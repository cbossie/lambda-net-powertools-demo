Demo - 

1] Introductory Information
Show DynamoDB Read and Write
Show S3 Read and Write


2] Let's Add the PowerTools Libraries
Nuget Package Manager

3] Configure the project for XRAY
AWSSDKHandler.RegisterXRayForAllServices();


4] Update the Environment Variables

Environment Variables
=====================

"POWERTOOLS_SERVICE_NAME": "PowertoolsDemoService",

"POWERTOOLS_LOG_LEVEL": "Debug",

"POWERTOOLS_LOGGER_CASE": "CamelCase",

"POWERTOOLS_LOGGER_LOG_EVENT": "true",

"POWERTOOLS_LOGGER_SAMPLE_RATE": "0",

"POWERTOOLS_METRICS_NAMESPACE": "PowertoolsDemoMetrics",

"POWERTOOLS_TRACE_DISABLED": "false",

"POWERTOOLS_TRACER_CAPTURE_RESPONSE": "true",

"POWERTOOLS_TRACER_CAPTURE_ERROR": "true"



5] Annotations - Logging
======================
[Logging]

   var lookupInfo = new Dictionary<string, object>()
    {
        {"LookupInfo", new Dictionary<string, object>{{ "extradata", id }}}
    }; 

-- Add Logger.Information()... 


6] Annotations - Tracing
======================
- Add Active Tracing to the Lambda Functions
- Update SDK to trace

 AWSSDKHandler.RegisterXRayForAllServices();

[Tracing]


Add a subsegment
[Tracing(Segment="DD")]


7]Annotations - Metrics
=====================
On the "Write Item"


[Metrics(CaptureColdStart = true)]

 Metrics.AddMetric("AmountAdded", item.Amount, MetricUnit.Count);

 (outside the function)
  private Dictionary<string, string> _dynamoDimensions = new Dictionary<string, string>{
        {"Environment", "Prod"},
        {"Application", "Dynamo"}
  }; 


  (Inside the Add to Table Function)
  Metrics.SetDefaultDimensions(_dynamoDimensions);

  Metrics.AddMetric()....


  private Dictionary<string, string> _parameterDimensions = new Dictionary<string, string>{
        {"Environment", "Prod"},
        {"Application", "Parameter"}
  }; 
  Metrics.SetDefaultDimensions(_parameterDimensions);






















