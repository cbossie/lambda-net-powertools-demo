Demo - 

1] Introductory Information
Show DynamoDB Read and Write
Show S3 Read and Write


2] Let's Add the PowerTools Libraries
Nuget Package Manager
- AWSXRAYRecorder.Handlers.AwsSdk
- AWS.Lambda.Powertools.Logging
- AWS.Lambda.Powertools.Tracing
- AWS.Lambda.Powertools.Metrics


3] Configure the project for XRAY
AWSSDKHandler.RegisterXRayForAllServices();




4] UPDATE SAM Template




Environment Variables
=====================




"POWERTOOLS_SERVICE_NAME": "PowertoolsDemoService",
"POWERTOOLS_LOG_LEVEL": "Debug",
"POWERTOOLS_LOGGER_CASE": "CamelCase",
"POWERTOOLS_LOGGER_LOG_EVENT": "true",
"POWERTOOLS_LOGGER_SAMPLE_RATE": "0",
"POWERTOOLS_METRICS_NAMESPACE": "PowertoolsDemoMetrics",
"POWERTOOLS_TRACE_DISABLED": "false",
"POWERTOOLS_TRACER_CAPTURE_RESPONSE": "true",
"POWERTOOLS_TRACER_CAPTURE_ERROR": "true",



5] Annotations - Logging
======================
a) For both functions
[Logging (ClearState = true)]

b) In "Read Table Item" Function


var logInfo = new Dictionary<string, object>()
{
    {"LookupInfo", new Dictionary<string, object>{{ "additionalinfo", id }}}
};
Logger.AppendKeys(logInfo);

-- In the read function, around the API call
Logger.LogInformation("Commencing Table Read");
...
Logger.LogInformation("Finishing Table Read");



6] Annotations - Tracing
======================
- Add Active Tracing to the Lambda Functions in the function (if you did not already)
- Include Nuget Package AWSXRAYRecorder.Handlers.AwsSdk
- In constructor: AWSSDKHandler.RegisterXRayForAllServices();


a) For both functions
[Tracing]

Add
[Tracing(SegmentName = "GetEnv")]

on the "GetEnv" function




7]Annotations - Metrics
=====================
On both DynamoDB functions""
[Metrics(CaptureColdStart = true)]


 -- outside the functions
  private Dictionary<string, string> _dynamoDimensions = new Dictionary<string, string>{
        {"Environment", "Prod"},
        {"Application", "Dynamo"}
  }; 


-- Inside both functions
Metrics.SetDefaultDimensions(_dynamoDimensions);

-- Write Table Item
 Metrics.AddMetric("AmountAdded", item.Amount, MetricUnit.Count);


 (Takes a few minutes to get there)






















